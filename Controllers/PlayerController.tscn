[gd_scene load_steps=13 format=2]

[ext_resource path="res://Actors/PlayerActor.tscn" type="PackedScene" id=1]
[ext_resource path="res://Controllers/UI/Damage.tscn" type="PackedScene" id=2]
[ext_resource path="res://Controllers/UI/Inventory.tscn" type="PackedScene" id=3]
[ext_resource path="res://Controllers/UI/HUD.tscn" type="PackedScene" id=4]
[ext_resource path="res://Controllers/UI/Abilities.tscn" type="PackedScene" id=5]
[ext_resource path="res://Controllers/UI/Respawn.tscn" type="PackedScene" id=6]
[ext_resource path="res://Controllers/UI/Dialogue.tscn" type="PackedScene" id=7]
[ext_resource path="res://Controllers/UI/Crest.tscn" type="PackedScene" id=8]
[ext_resource path="res://Controllers/UI/marker.dae" type="PackedScene" id=9]
[ext_resource path="res://Controllers/UI/marker.gd" type="Script" id=10]

[sub_resource type="GDScript" id=1]

script/source = "extends \"res://Controllers/PController.gd\"

func _unhandled_input(event):
	#TODO: limit inputs if actor is busy, allow readying of actions during cool downs
	if (event is InputEventMouseMotion and Input.is_action_pressed(\"cam_rotate\")):
		var right = Vector3(1,0,0)
		cam3D.get_parent().get_parent().rotate_y(-event.relative.x / 160.0)
		cam3D.get_parent().get_parent().rotate_object_local(right, -event.relative.y / 160.0)
		cam3D.get_parent().get_parent().rotation.x = min(max(cam3D.get_parent().get_parent().rotation.x, cam_max_pitch), cam_min_pitch)
		if (cam3D.get_parent().get_parent().rotation.z != 0):
			cam3D.get_parent().get_parent().rotate_y(PI)
			cam3D.get_parent().get_parent().rotation.z = 0
		print(cam3D.get_parent().get_parent().rotation)
	else: if (event.is_pressed()):
		if (event.is_action(\"toggle_combat\")):
			actor.toggleInCombat()
		if (event.is_action(\"move\")): #TODO: separate combat move from regular
			attacking = false
			var clickpos = _get_pos_at_mouse()
			if (clickpos != null):
				var clickpos2D = global.to2D(clickpos)
				actor.walkTowards(clickpos2D)
		
		if (event.is_action(\"cancel\")):
			_hideAllAbilities()
			selected_ability = -1
		
		else: if (event.is_action(\"Ability1\")):
			_selectAbility(0)
		else: if (event.is_action(\"Ability2\")):
			_selectAbility(1)
		else: if (event.is_action(\"Ability3\")):
			_selectAbility(2)
		else: if (event.is_action(\"Ability4\")):
			_selectAbility(3)
		else: if (event.is_action(\"Ability5\")):
			_selectAbility(4)
		else: if (event.is_action(\"Ability6\")):
			_selectAbility(5)
		else: if (event.is_action(\"Ability7\")):
			_selectAbility(6)
		else: if (event.is_action(\"Ability8\")):
			_selectAbility(7)
		else: if (event.is_action(\"Ability9\")):
			_selectAbility(8)
		else: if (event.is_action(\"Ability10\")):
			_selectAbility(9)
		
		else: if (event.is_action(\"interact\")):
				if (selected_ability >= 0 and _checkAbilityByIndex(selected_ability)):
					var sa = selected_ability
					selected_ability = -1
					var mouse_pos = get_viewport().get_mouse_position()
					var clickpos = global.xzPlaneIntersect(cam3D.project_ray_origin(mouse_pos), cam3D.project_ray_normal(mouse_pos))
					if (clickpos != null):
						var clickpos2D = global.to2D(clickpos)
						actor.queueAbilityTowardsByName(ability_list[sa].get_ref().name, clickpos2D)
				else:
					#TODO: ignore items on the ground if in combat
					var atClick = _get_item_at_mouse()
					if (atClick != null):
						if (atClick.has_method(\"__ITEM\")):
							actor.pickUp(atClick)
						else: if (atClick.has_method(\"__TRANSITION\")):
							actor.moveThrough(atClick)
						else: if (atClick.has_method(\"__DIALOGUE\")):
							actor.talkTo(atClick)
		
		else: if (event.is_action(\"inventory\")):
			_toggle_inventory()
		else: if (event.is_action(\"abilities\")):
			_toggle_abilities()
		
		else: if (event.is_action(\"cam_move_in\")):
			var zoom = max(cam3D.transform.origin.z-1, cam_min_dist)
			cam3D.transform.origin.z = zoom
		else: if (event.is_action(\"cam_move_out\")):
			var zoom = min(cam3D.transform.origin.z+1, cam_max_dist)
			cam3D.transform.origin.z = zoom
		else: if (event.is_action(\"cam_attach\")):
			_setCameraAttached(true)
		
		elif (event.is_action(\"stop_all\")):
			actor.stopAll()
			_hideAllAbilities()
			selected_ability = -1

func setInCombat(combat):
	actor.setInCombat(combat)
	HUD.setInCombat(combat)

func drop_item(id):
	actor.dropItem(id)

func equip_item(id):
	actor.equipItem(id)

func unequip_item(type):
	actor.unequipItem(type)

func equipCrest(id):
	actor.equipCrestElement(id)
func unequipCrest(id):
	actor.unequipCrestElement(id)
func isCrestEquipped(id):
	return actor.current_crest_elements.has(id)

func respawn():
	get_node(\"/root/World\").changeScene(self, actor.respawn_map, actor.respawn_point)
	actor.reset()

func _on_Actor_in_combat():
	HUD.setInCombat(true)

func _on_Actor_out_combat():
	HUD.setInCombat(false)

func _on_Actor_scene_switch(toMap, toPoint):
	get_node(\"/root/World\").changeScene(self, toMap, toPoint)

func _on_Actor_talk_to(talk_to):
	var d = talk_to.__DIALOGUE(name)
	if (d):
		dialogueUI.show_dialogue(d.title, d.content, d.responses, talk_to)

func _on_Actor_crest_updated():
	crestUI.updateCrest()
	inventoryUI.updateEquipment(actor.equipped_weapon, actor.equipped_head, actor.equipped_chest, actor.equipped_arms, actor.equipped_legs)
	abilityUI.updateAbilities()
	_checkAbilityHotslots()
	HUD.updateAbilityBar()
	damageUI.updateDamage()
"

[sub_resource type="SpatialMaterial" id=2]

render_priority = 0
flags_transparent = true
flags_unshaded = true
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 0
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 0
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 0.03125, 0.03125, 0.03125, 0.729294 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 0.0
roughness_texture_channel = 0
emission_enabled = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_enable = false
_sections_unfolded = [ "Albedo", "Flags", "Metallic", "Vertex Color" ]

[node name="Node" type="Node" index="0"]

script = SubResource( 1 )

[node name="Actor" parent="." index="0" instance=ExtResource( 1 )]

[node name="Camera2D" type="Camera2D" parent="Actor" index="1"]

anchor_mode = 1
rotating = false
current = false
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = false
smoothing_speed = 5.0
offset_v = 0.0
offset_h = 0.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false
_sections_unfolded = [ "Drag Margin", "Smoothing", "Transform" ]

[node name="Model" parent="Actor/Spatial" index="0"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00439453, 0, -0.00317383 )

[node name="Spatial" type="Spatial" parent="Actor/Spatial" index="1"]

transform = Transform( 0.707107, 0.5, -0.5, 0, 0.707107, 0.707107, 0.707107, -0.5, 0.5, 0, 1.2, 0 )
_sections_unfolded = [ "Transform" ]

[node name="Spatial" type="Spatial" parent="Actor/Spatial/Spatial" index="0"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4.5 )
_sections_unfolded = [ "Transform" ]

[node name="Camera" type="Camera" parent="Actor/Spatial/Spatial/Spatial" index="0"]

keep_aspect = 1
cull_mask = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0
doppler_tracking = 0
projection = 0
current = false
fov = 70.0
size = 1.0
near = 0.05
far = 200.0
_sections_unfolded = [ "Transform" ]

[node name="ClickCast" type="RayCast2D" parent="." index="1"]

enabled = true
exclude_parent = true
cast_to = Vector2( 1, 1 )
collision_mask = 524288

[node name="CanvasLayer" type="CanvasLayer" parent="." index="2"]

editor/display_folded = true
layer = 2
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="Damage" parent="CanvasLayer" index="0" instance=ExtResource( 2 )]

margin_left = 32.0
margin_top = 936.0
margin_right = 221.0
margin_bottom = 1054.0

[node name="Inventory" parent="CanvasLayer" index="1" instance=ExtResource( 3 )]

visible = false
_sections_unfolded = [ "Margin", "Rect", "Theme" ]

[node name="HUD" parent="CanvasLayer" index="2" instance=ExtResource( 4 )]

[node name="Abilities" parent="CanvasLayer" index="3" instance=ExtResource( 5 )]

visible = false
margin_left = 1128.0
margin_top = 8.0
margin_right = 1142.0
margin_bottom = 22.0

[node name="Respawn" parent="CanvasLayer" index="4" instance=ExtResource( 6 )]

visible = false

[node name="Dialogue" parent="CanvasLayer" index="5" instance=ExtResource( 7 )]

visible = false
margin_left = 726.0
margin_top = 517.0
margin_right = 1182.0
margin_bottom = 569.0

[node name="Crest" parent="CanvasLayer" index="6" instance=ExtResource( 8 )]

[node name="WalkMarker" parent="." index="3" instance=ExtResource( 9 )]

script = ExtResource( 10 )

[node name="Circle" parent="WalkMarker" index="0"]

material/0 = SubResource( 2 )
_sections_unfolded = [ "material" ]

[node name="MouseCast" type="RayCast" parent="." index="4"]

enabled = false
exclude_parent = true
cast_to = Vector3( 0, -1, 0 )
collision_mask = 1

[connection signal="crest_updated" from="Actor" to="." method="_on_Actor_crest_updated"]

[connection signal="damage_updated" from="Actor" to="." method="_on_Actor_damage_updated"]

[connection signal="equipment_updated" from="Actor" to="." method="_on_Actor_equipment_updated"]

[connection signal="in_combat" from="Actor" to="." method="_on_Actor_in_combat"]

[connection signal="inventory_updated" from="Actor" to="." method="_on_Actor_inventory_updated"]

[connection signal="out_combat" from="Actor" to="." method="_on_Actor_out_combat"]

[connection signal="scene_switch" from="Actor" to="." method="_on_Actor_scene_switch"]

[connection signal="talk_to" from="Actor" to="." method="_on_Actor_talk_to"]


[editable path="Actor"]
[editable path="WalkMarker"]
