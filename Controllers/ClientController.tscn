[gd_scene load_steps=9 format=2]

[ext_resource path="res://Actors/PlayerActor.tscn" type="PackedScene" id=1]
[ext_resource path="res://Controllers/UI/Damage.tscn" type="PackedScene" id=2]
[ext_resource path="res://Controllers/UI/Inventory.tscn" type="PackedScene" id=3]
[ext_resource path="res://Controllers/UI/HUD.tscn" type="PackedScene" id=4]
[ext_resource path="res://Controllers/UI/Abilities.tscn" type="PackedScene" id=5]
[ext_resource path="res://Controllers/UI/move_target.png" type="Texture" id=6]
[ext_resource path="res://Controllers/UI/marker.dae" type="PackedScene" id=7]

[sub_resource type="GDScript" id=1]

script/source = "extends \"res://Controllers/Controller.gd\"

func _unhandled_input(event):
	#TODO: limit inputs if actor is busy, allow readying of actions during cool downs
	if (event.is_pressed()):
		if (event.is_action(\"toggle_combat\")):
			actor.toggleInCombat()
			HUD.toggleInCombat()
			get_node(\"/root/World\").rpc_id(1, \"setInCombat\", actor.in_combat)
		if (event.is_action(\"move\")):
			attacking = false
			var clickpos = _get_pos_at_mouse()
			if (clickpos != null):
				var clickpos2D = Vector2(clickpos.x, clickpos.z)
				actor.walkTowards(clickpos2D)
				get_node(\"/root/World\").rpc_id(1, \"walkTowards\", clickpos2D)
		
		if (event.is_action(\"cancel\")):
			_hideAllAbilities()
			selected_ability = -1
		
		else: if (event.is_action(\"Ability1\")):
			_selectAbility(0)
		else: if (event.is_action(\"Ability2\")):
			_selectAbility(1)
		else: if (event.is_action(\"Ability3\")):
			_selectAbility(2)
		else: if (event.is_action(\"Ability4\")):
			_selectAbility(3)
		else: if (event.is_action(\"Ability5\")):
			_selectAbility(4)
		else: if (event.is_action(\"Ability6\")):
			_selectAbility(5)
		else: if (event.is_action(\"Ability7\")):
			_selectAbility(6)
		else: if (event.is_action(\"Ability8\")):
			_selectAbility(7)
		else: if (event.is_action(\"Ability9\")):
			_selectAbility(8)
		else: if (event.is_action(\"Ability10\")):
			_selectAbility(9)
		
		else: if (event.is_action(\"interact\")):
				if (selected_ability >= 0 and _checkAbilityByIndex(selected_ability)):
					var sa = selected_ability
					selected_ability = -1
					var mouse_pos = get_viewport().get_mouse_position()
					var clickpos = global.xzPlaneIntersect(cam3D.project_ray_origin(mouse_pos), cam3D.project_ray_normal(mouse_pos))
					if (clickpos != null):
						var clickpos2D = Vector2(clickpos.x, clickpos.z)
						actor.queueAbilityTowardsByName(ability_list[sa].get_ref().name, clickpos2D)
						get_node(\"/root/World\").rpc_id(1, \"queueAbilityTowardsByName\", ability_list[sa].get_ref().name, cam.get_global_mouse_position()) #TODO: add what equipment slot later
				else:
					#TODO: ignore items on the ground if in combat
					var atClick = _get_item_at_mouse() #TODO: make the check of if to pick up or not based on whats found
					if (atClick != null and atClick.has_method(\"__ITEM\")):
						actor.pickUp(atClick)
						get_node(\"/root/World\").rpc_id(1, \"pickUp\", atClick.name)
		
		else: if (event.is_action(\"inventory\")):
			_toggle_inventory()
		else: if (event.is_action(\"abilities\")):
			_toggle_abilities()

func setInCombat(combat):
	actor.in_combat = combat
	#TODO: probably make server check this shit

func drop_item(id):
	actor.dropItem(id)
	get_node(\"/root/World\").rpc_id(1, \"dropItem\", id)

func equip_item(id):
	actor.equipItem(id)
	get_node(\"/root/World\").rpc_id(1, \"equipItem\", id)

func unequip_item(type):
	actor.unequipItem(type)
	get_node(\"/root/World\").rpc_id(1, \"unequipItem\", type)
"

[node name="Node" type="Node"]

script = SubResource( 1 )

[node name="Actor" parent="." index="0" instance=ExtResource( 1 )]

[node name="Camera2D" type="Camera2D" parent="Actor" index="1"]

anchor_mode = 1
rotating = false
current = false
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = false
smoothing_speed = 5.0
offset_v = 0.0
offset_h = 0.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false
_sections_unfolded = [ "Drag Margin", "Offset", "Smoothing", "Transform" ]

[node name="Camera" type="Camera" parent="Actor/Spatial" index="1"]

transform = Transform( 0.717471, 0.450118, -0.53163, 0.0108616, 0.755868, 0.654633, 0.696504, -0.475455, 0.537424, -4.09512, 4.99419, 4.42696 )
keep_aspect = 1
cull_mask = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0
doppler_tracking = 0
projection = 0
current = false
fov = 70.0
size = 1.0
near = 0.05
far = 100.0

[node name="ClickCast" type="RayCast2D" parent="." index="1"]

enabled = false
exclude_parent = true
cast_to = Vector2( 0, 0 )
collision_mask = 524288

[node name="CanvasLayer" type="CanvasLayer" parent="." index="2"]

layer = 2
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="Damage" parent="CanvasLayer" index="0" instance=ExtResource( 2 )]

margin_right = 189.0
margin_bottom = 32.0

[node name="Inventory" parent="CanvasLayer" index="1" instance=ExtResource( 3 )]

visible = false
_sections_unfolded = [ "Margin", "Rect" ]

[node name="HUD" parent="CanvasLayer" index="2" instance=ExtResource( 4 )]

[node name="Abilities" parent="CanvasLayer" index="3" instance=ExtResource( 5 )]

visible = false
margin_left = 1156.0
margin_top = 11.0
margin_right = 1223.0
margin_bottom = 39.0

[node name="WalkDest" type="Sprite" parent="." index="3"]

visible = false
texture = ExtResource( 6 )

[node name="WalkMarker" parent="." index="4" instance=ExtResource( 7 )]

visible = false

[node name="MouseCast" type="RayCast" parent="." index="5"]

enabled = false
exclude_parent = true
cast_to = Vector3( 0, -1, 0 )
collision_mask = 1

[connection signal="damage_updated" from="Actor" to="." method="_on_Actor_damage_updated"]

[connection signal="equipment_updated" from="Actor" to="." method="_on_Actor_equipment_updated"]

[connection signal="inventory_updated" from="Actor" to="." method="_on_Actor_inventory_updated"]


[editable path="Actor"]
