[gd_scene load_steps=5 format=2]

[ext_resource path="res://Items/FistItem.tscn" type="PackedScene" id=1]
[ext_resource path="res://Actors/Assets/Character.dae" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]

script/source = "extends \"res://Actors/Actor.gd\"

onready var held_l = $Spatial/Model/Armature/Skeleton/Held_L
onready var held_r = $Spatial/Model/Armature/Skeleton/Held_R

onready var inventory_node = $Inventory

onready var default_weapon = $DefaultWeapon
onready var equipped_weapon = default_weapon
var equipped_chest = null
var equipped_head = null
var equipped_arms = null
var equipped_legs = null

var pick_up_range = 0.1
var inventory = {}

func _init():
	walk_speed = 650.0
	global_cooldown = 5.0

func addItem(id, type):
	var new_item = load(\"res://Items/\" + type + \".tscn\").instance()
	new_item.id = id
	new_item.set_name(new_item.id)
	inventory_node.add_child(new_item)
	inventory[id] = new_item
func destroyItem(id):
	var item = inventory_node.find_node(id)
	if (item != null):
		inventory_node.remove_child(item)
		inventory.erase(id)
		item.free()

func getState():
	#get a state that you can regen the entierty of the actor from
	var state = .getState()
	
	var inv = {}
	for i in inventory:
		inv[i] = inventory[i].getState()
	
	var e_weapon = null
	if (equipped_weapon):
		e_weapon = equipped_weapon.id
	var e_chest = null
	if (equipped_chest):
		e_chest = equipped_chest.id
	var e_head = null
	if (equipped_head):
		e_head = equipped_head.id
	var e_arms = null
	if (equipped_arms):
		e_arms = equipped_arms.id
	var e_legs = null
	if (equipped_legs):
		e_legs = equipped_legs.id
	
	state[\"default_weapon\"] = default_weapon.getState()
	state[\"equipped_weapon\"] = e_weapon
	state[\"equipped_chest\"] = e_chest
	state[\"equipped_head\"] = e_head
	state[\"equipped_arms\"] = e_arms
	state[\"equipped_legs\"] = e_legs
	state[\"inventory\"] = inv
	
	return state

func _equipment_state_check(equipment, e_name):
	if (equipment == null and e_name == null):
		return false
	if !(equipment != null and e_name != null):
		return true
	return equipment.id != e_name
func setState(state):
	.setState(state)
	#set all parameters of the actor, used to resync with server
	#TODO: optimize signal emission
	for i in state[\"inventory\"]:
		if (inventory.has(i)):
			if (inventory[i].type != state[\"inventory\"][i][\"type\"]):
				destroyItem(i)
				addItem(i, state[\"inventory\"][i][\"type\"])
			inventory[i].setState(state[\"inventory\"][i])
		else:
			addItem(i, state[\"inventory\"][i][\"type\"])
			inventory[i].setState(state[\"inventory\"][i])
	emit_signal(\"inventory_updated\")
	
	var equipped_weapon_name = state[\"equipped_weapon\"]
	if (_equipment_state_check(equipped_weapon, equipped_weapon_name)):
		if (equipped_weapon_name == default_weapon.id):
			unequipItem(\"Weapon\")
		else:
			equipItem(equipped_weapon_name)
		emit_signal_equipment_updated()
	
	var equipped_chest_name = state[\"equipped_chest\"]
	if (_equipment_state_check(equipped_chest, equipped_chest_name)):
		if (equipped_chest_name == null):
			unequipItem(\"Chest\")
		else:
			equipItem(equipped_chest_name)
		emit_signal_equipment_updated()
	var equipped_head_name = state[\"equipped_head\"]
	if (_equipment_state_check(equipped_head, equipped_head_name)):
		if (equipped_head_name == null):
			unequipItem(\"head\")
		else:
			equipItem(equipped_head_name)
		emit_signal_equipment_updated()
	var equipped_arms_name = state[\"equipped_arms\"]
	if (_equipment_state_check(equipped_arms, equipped_arms_name)):
		if (equipped_arms_name == null):
			unequipItem(\"arms\")
		else:
			equipItem(equipped_arms_name)
		emit_signal_equipment_updated()
	var equipped_legs_name = state[\"equipped_legs\"]
	if (_equipment_state_check(equipped_legs, equipped_legs_name)):
		if (equipped_legs_name == null):
			unequipItem(\"legs\")
		else:
			equipItem(equipped_legs_name)
		emit_signal_equipment_updated()
	
	default_weapon.setState(state[\"default_weapon\"])

func queueAbilityTowardsByName(abil_name, point):
	if (!busy):
		walk_towards = null
		pick_up = null
		move_through = null
		
		queued_ability_point = point
		equipped_weapon.pointTowardsByName(abil_name, point) #TODO: make it depend on slot and whatever
		queued_ability_name = abil_name

func dropItem(id):
	if (inventory.has(id)):
		if (equipped_weapon.id != id
		and (!equipped_chest or equipped_chest.id != id)):
			inventory_node.remove_child(inventory[id])
			world.Items.add_child(inventory[id])
			inventory[id].drop(get_global_position())
			inventory.erase(id)
			emit_signal(\"inventory_updated\")

func equipItem(id):
	#TODO: dont allow any equipment changing during busy time
	#TODO: dont allow any equipment changing in combat
	if (inventory.has(id)):
		var item = inventory[id]
		if (item.slot == \"Weapon\"):
			equipped_weapon = item
		else: if (item.slot == \"Chest\"):
			equipped_chest = item
		else: if (item.slot == \"Head\"):
			equipped_head = item
		else: if (item.slot == \"Arms\"):
			equipped_arms = item
		else: if (item.slot == \"Legs\"):
			equipped_legs = item
		_setEquipmentModel(item.slot)
	else:
		print(\"MISSING ITEM \" + String(id))
	
	emit_signal(\"inventory_updated\")
	emit_signal_equipment_updated()

func unequipItem(type):
	#TODO: dont allow changing weapons during busy time
	#TODO: dont allow any equipment changing in combat
	if (type == \"Weapon\"):
		equipped_weapon = default_weapon
	else: if (type == \"Chest\"):
		equipped_chest = null
	else: if (type == \"Head\"):
		equipped_head = null
	else: if (type == \"Arms\"):
		equipped_arms = null
	else: if (type == \"Legs\"):
		equipped_legs = null
	_unsetEquipmentModel(type)
	emit_signal(\"inventory_updated\")
	emit_signal_equipment_updated()

func _setEquipmentModel(type):
	_unsetEquipmentModel(type)
	var mesh
	var wrmesh
	var wlmesh
	if (type == \"Weapon\" and equipped_weapon):
		if (equipped_weapon.rMesh()):
			wrmesh = equipped_weapon.rMesh().duplicate()
		if (equipped_weapon.lMesh()):
			wlmesh = equipped_weapon.lMesh().duplicate()
	else: if (type == \"Chest\" and equipped_chest):
		mesh = equipped_chest.mesh.duplicate()
		skeleton.get_node(\"BodyDefault\").hide()
	else: if (type == \"Head\" and equipped_head):
		mesh = equipped_head.mesh.duplicate()
		skeleton.get_node(\"HeadDefault\").hide()
	else: if (type == \"Arms\" and equipped_arms):
		mesh = equipped_arms.mesh.duplicate()
		skeleton.get_node(\"HandsDefault\").hide()
	else: if (type == \"Legs\" and equipped_legs):
		mesh = equipped_legs.mesh.duplicate()
		skeleton.get_node(\"LegsDefault\").hide()
	
	if (mesh):
		mesh.name = type
		skeleton.add_child(mesh)
	if (wrmesh):
		wrmesh.name = type + \"R\"
		held_r.add_child(wrmesh)
	if (wlmesh):
		wlmesh.name = type + \"L\"
		held_l.add_child(wlmesh)

func _unsetEquipmentModel(type):
	var mesh = skeleton.get_node(type)
	if (mesh):
		skeleton.remove_child(mesh)
		mesh.queue_free()
	var wrmesh = held_r.get_node(type + \"R\")
	if (wrmesh):
		skeleton.remove_child(wrmesh)
		wrmesh.queue_free()
	var wlmesh = held_l.get_node(type + \"L\")
	if (wlmesh):
		skeleton.remove_child(wlmesh)
		wlmesh.queue_free()
	
	if (type == \"Chest\"):
		skeleton.get_node(\"BodyDefault\").show()
	if (type == \"Head\"):
		skeleton.get_node(\"HeadDefault\").show()
	if (type == \"Arms\"):
		skeleton.get_node(\"HandsDefault\").show()
	if (type == \"Legs\"):
		skeleton.get_node(\"LegsDefault\").show()

func startTowardsByName(ability_name, point): #TODO: make this require which equipment the ability is from
	if (equipped_weapon != null):
		equipped_weapon.startTowardsByName(self, ability_name, point)

func _updateModelPosition():
	var pos = ._updateModelPosition()
	#TODO: make this match to the height of the navmesh at that point
	for i in inventory_node.get_children():
		i.setGlobalPosition(pos)
	default_weapon.setGlobalPosition(pos)

func _ready():
	updateWorld()
	
	#Set all animations that need to to loop and vice versa
	for aname in anim_player.get_animation_list():
		anim_player.get_animation(aname).set_loop(false) #Since if the default is loop or not seems random
	anim_player.get_animation(\"Idle\").set_loop(true)
	anim_player.get_animation(\"Idle_Combat\").set_loop(true)
	anim_player.get_animation(\"Run\").set_loop(true)
	
	if (in_combat):
		_anim_playing(\"Idle_Combat\")
	else:
		_anim_playing(\"Idle\")

func _process(delta):
	_updateModelPosition()
	#TODO: limit inputs when attacking
	if (!is_dead):
		#TODO: make the actor walk, interact, attack, and all that, client side based on parameters passed by controller
		if (walk_towards != null and !isOnGlobalCooldown()):
			if (in_combat):
				busy = true
			if (((walk_towards - global_transform.origin)).length() <= walk_speed * delta):
				translate((walk_towards - global_transform.origin))
				walk_towards = null
				if (walk_path != null and !walk_path.empty()):
					var walk3D = walk_path.pop_front()
					walk_towards = global.to2D(walk3D)
					_turn_towards(walk_towards)
				else:
					if (in_combat):
						startGlobalCooldown()
					busy = false
			else:
				translate((walk_towards - global_transform.origin).normalized() * walk_speed * delta)
		
		if (pick_up != null and pick_up.get_ref() and !pick_up.get_ref().on_ground):
			pick_up = null
		
		if (queued_ability_name != null and !isOnGlobalCooldown() and !busy):
			startTowardsByName(queued_ability_name, queued_ability_point)
			queued_ability_name = null
		
		#TODO: put on a lock on destructive item interactions like picking things up
		if (pick_up != null and pick_up.get_ref() and (pick_up.get_ref().getGlobalPosition() - global_transform.origin).length() < pick_up_range):
			inventory[pick_up.get_ref().id] = pick_up.get_ref()
			world.Items.remove_child(pick_up.get_ref())
			inventory_node.add_child(pick_up.get_ref())
			pick_up.get_ref().pickUp()
			pick_up = null
			emit_signal(\"inventory_updated\")
		
		if (move_through != null and move_through.get_ref() and (global.to2D(move_through.get_ref().getGlobalPosition()) - global_transform.origin).length() < move_through.get_ref().moveRange):
			emit_signal(\"scene_switch\", move_through.get_ref().toMap, move_through.get_ref().toPoint)
			print(move_through.get_ref().toMap)
			walk_towards = null
			move_through = null
	
	#Make sure the right animation is playing
	if (!is_dead):
		if (!isOnAnimCooldown()):
			if (!is_attacking and walk_towards and !isOnGlobalCooldown()):
				_anim_playing(\"Run\")
			else:
				if (in_combat):
					_anim_playing(\"Idle_Combat\")
				else:
					_anim_playing(\"Idle\")
	else:
		_anim_playing(\"Death\")

func emit_signal_equipment_updated():
	current_defense = defense
	if equipped_chest != null:
		current_defense = add_def(current_defense, equipped_chest.defense)
	if equipped_head != null:
		current_defense = add_def(current_defense, equipped_head.defense)
	if equipped_arms != null:
		current_defense = add_def(current_defense, equipped_arms.defense)
	if equipped_legs != null:
		current_defense = add_def(current_defense, equipped_legs.defense)
	emit_signal(\"equipment_updated\")
func add_def(a, b):
	var c = []
	var i = 0
	for ai in a:
		c.append(ai + b[i])
	return c
"

[sub_resource type="CircleShape2D" id=2]

custom_solver_bias = 0.0
radius = 27.0

[node name="Actor" type="KinematicBody2D"]

input_pickable = true
collision_layer = 1
collision_mask = 1
collision/safe_margin = 0.08
script = SubResource( 1 )
_sections_unfolded = [ "Audio Bus", "Collision", "Pickable", "Transform" ]

[node name="CollisionShape2D" type="CollisionShape2D" parent="." index="0"]

show_behind_parent = true
shape = SubResource( 2 )
_sections_unfolded = [ "Material", "Transform", "Visibility", "Z Index" ]

[node name="DefaultWeapon" parent="." index="1" instance=ExtResource( 1 )]

_sections_unfolded = [ "Collision", "Transform" ]

[node name="Inventory" type="Node2D" parent="." index="2"]

[node name="Spatial" type="Spatial" parent="." index="3"]

[node name="Model" parent="Spatial" index="0" instance=ExtResource( 2 )]

[node name="Skeleton" parent="Spatial/Model/Armature" index="0"]

_sections_unfolded = [ "bones", "bones/16", "bones/21", "bones/22", "bones/23", "bones/24", "bones/25", "bones/26", "bones/9" ]

[node name="Held_L" type="BoneAttachment" parent="Spatial/Model/Armature/Skeleton" index="4"]

transform = Transform( -1, 0, 4.16988e-009, -3.72529e-009, 1, 6.89546e-011, 1.7493e-015, -7.38743e-009, -1, 0.685988, 1.32506, 0.00487549 )
bone_name = "Held_L"

[node name="Held_R" type="BoneAttachment" parent="Spatial/Model/Armature/Skeleton" index="5"]

transform = Transform( -1, -1.33227e-015, 3.28071e-009, 3.72529e-009, 1, 4.18201e-010, -5.10773e-015, -7.38743e-009, -1, -0.685988, 1.32506, 0.00487549 )
bone_name = "Held_R"


[editable path="Spatial/Model"]
