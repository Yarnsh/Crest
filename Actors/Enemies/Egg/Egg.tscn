[gd_scene load_steps=5 format=2]

[ext_resource path="res://Actors/Enemies/Egg/Assets/EggEnemy.dae" type="PackedScene" id=1]
[ext_resource path="res://Abilities/Enemy/Egg/Slam.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]

script/source = "extends \"res://Actors/Actor.gd\"

onready var slam_abil = $Abilities/Slam

func _init():
	walk_speed = 100.0
	global_cooldown = 5.0

func getState():
	#get a state that you can regen the entierty of the actor from
	return .getState()

func setState(state):
	#set all parameters of the actor, used to resync with server
	#TODO: optimize signal emission
	.setState(state)

func queueAbilityTowardsByName(abil_name, point):
	if (!busy):
		walk_towards = null
		pick_up = null
		
		queued_ability_point = point
		#TODO: add abilities to the egg
		#equipped_weapon.pointTowardsByName(abil_name, point) #TODO: make it depend on slot and whatever
		queued_ability_name = abil_name

func startTowardsByName(ability_name, point):
	# If we get more abilities on egg actually check passed name
	slam_abil.ability_user = weakref(self)
	slam_abil.startTowards(point)

func _ready():
	updateWorld()
	
	#Set all animations that need to to loop and vice versa
	for aname in anim_player.get_animation_list():
		anim_player.get_animation(aname).set_loop(false) #Since if the default is loop or not seems random
	anim_player.get_animation(\"Idle\").set_loop(true)
	anim_player.get_animation(\"Idle_combat\").set_loop(true)
	anim_player.get_animation(\"Idle_rare\").set_loop(true)
	anim_player.get_animation(\"Walk\").set_loop(true)
	
	if (in_combat):
		_anim_playing(\"Idle_combat\")
	else:
		_anim_playing(\"Idle\")

func _process(delta):
	_updateModelPosition()

func _physics_process(delta):
	#TODO: limit inputs when attacking
	if (!is_dead):
		#TODO: make the actor walk, interact, attack, and all that, client side based on parameters passed by controller
		if (walk_towards != null and !isOnGlobalCooldown()):
			if (in_combat):
				busy = true
			if (((walk_towards - global_transform.origin)).length() <= walk_speed * delta):
				move_and_slide((walk_towards - global_transform.origin) / delta)
				walk_towards = null
				if (walk_path != null and !walk_path.empty()):
					var walk3D = walk_path.pop_front()
					walk_towards = global.to2D(walk3D)
					_turn_towards(walk_towards)
				else:
					if (in_combat):
						startGlobalCooldown()
					busy = false
			else:
				move_and_slide((walk_towards - global_transform.origin).normalized() * walk_speed)
		
		if (pick_up != null and pick_up.get_ref() and !pick_up.get_ref().on_ground):
			pick_up = null
		
		if (queued_ability_name != null and !isOnGlobalCooldown() and !busy):
			startTowardsByName(queued_ability_name, queued_ability_point)
			queued_ability_name = null
	
	#Make sure the right animation is playing
	if (!is_dead):
		if (!isOnAnimCooldown()):
			if (!is_attacking and walk_towards and !isOnGlobalCooldown()):
				_anim_playing(\"Walk\")
			else:
				if (in_combat):
					_anim_playing(\"Idle_combat\")
				else:
					_anim_playing(\"Idle\")
	else:
		_anim_playing(\"Death\")
"

[sub_resource type="CircleShape2D" id=2]

custom_solver_bias = 0.0
radius = 25.0

[node name="Egg" type="KinematicBody2D" index="0"]

input_pickable = false
collision_layer = 1
collision_mask = 1
collision/safe_margin = 0.08
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="." index="0"]

shape = SubResource( 2 )
_sections_unfolded = [ "Transform" ]

[node name="Spatial" type="Spatial" parent="." index="1"]

[node name="Model" parent="Spatial" index="0" instance=ExtResource( 1 )]

[node name="Abilities" type="Node2D" parent="." index="2"]

_sections_unfolded = [ "Transform" ]

[node name="Slam" parent="Abilities" index="0" instance=ExtResource( 2 )]

_sections_unfolded = [ "Transform" ]


