[gd_scene load_steps=3 format=2]

[ext_resource path="res://Main/Maps/Forest1.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

onready var Players = {}
onready var NPCs = {}
onready var Items = {}

var _update_all_clients_thread = Thread.new()
func _update_all_clients(par):
	while(true):
		OS.delay_msec(100)
		rpc(\"updateClock\", global.clock)
		#TODO: only send info players should be aware of, distance wise and not others inventory
		var playerMap = {}
		var players = Players.values()
		for p in players:
			if (typeof(p) != TYPE_NIL):
				pass
				playerMap[p.name] = p.getState()
		
		var itemMap = {}
		var items = Items.values()
		for i in items:
			if (typeof(i) != TYPE_NIL):
				pass
				itemMap[i.name] = i.getState()
		
		rpc(\"updateWorld\", playerMap, itemMap)

func changeScene(controller, to_map, to_position):
	#var map = get_node(to_map)
	#if (map == null):
	var map = load(\"res://Main/Maps/\" + to_map + \".tscn\").instance()
	
	var oldmap = controller.get_parent().get_parent()
	controller.get_parent().remove_child(controller)
	#remove_child(oldmap)
	oldmap.call_deferred(\"free\")
	#oldmap.disable()
	add_child(map)
	map.Players.add_child(controller)
	controller.setPosition(global.to2D(to_position))
	controller.actor.updateWorld()

#----------------------------------
# Spawner functions
#----------------------------------

func _spawn_single_player():
	var new_player = preload(\"res://Controllers/PlayerController.tscn\").instance()
	new_player.set_name(\"1\")
	#TODO: player initialization
	Players[new_player.name] = new_player
	$Forest1.Players.add_child(new_player) # Temporary
	return new_player

func _spawn_network_player(id):
	var new_player = preload(\"res://Controllers/NetworkController.tscn\").instance()
	new_player.set_name(id)
	#TODO: player initialization
	Players[new_player.name] = new_player
	$Forest1.Players.add_child(new_player) # Temporary
	return new_player

func _spawn_client_player():
	var new_player = preload(\"res://Controllers/ClientController.tscn\").instance()
	new_player.set_name(String(get_tree().get_network_unique_id()))
	#TODO: player initialization
	Players[new_player.name] = new_player
	$Forest1.Players.add_child(new_player) # Temporary
	return new_player

func _remove_player(id):
	var p = Players[String(id)]
	if (p != null):
		Players.erase(p.name)
		p.free()

func _spawn_item(type):
	return _spawn_item_at(type, Vector2(0,0))

func _spawn_item_at(type, pos):
	var new_item = load(\"res://Items/\" + type + \".tscn\").instance()
	new_item.setGlobalPosition(pos)
	new_item.set_name(new_item.id)
	Items[new_item.name] = new_item
	return new_item

func load_item(state):
	var item = load(\"res://Items/\" + state[\"type\"] + \".tscn\").instance()
	Items[item.name] = item
	item.setState(state)
	item.set_name(item.id)
	return item

func _remove_item(id):
	var i = Items[String(id)]
	if (i != null):
		Items.erase(i.name)
		i.free()

#--------------------------------
# Network management
#--------------------------------

func _connected_ok():
	rpc_id(1, \"addPlayerToGame\")
	_spawn_client_player()
	#TODO: get relevant world state and request that server spawn your guy

func _connected_fail():
	get_tree().set_network_peer(null)
	#TODO: give popup of issue before going back to menu
	get_tree().change_scene(\"res://Main/Main.tscn\")

func _server_disconnected():
	get_tree().set_network_peer(null)
	#TODO: give popup of issue before going back to menu
	get_tree().change_scene(\"res://Main/Main.tscn\")

func _player_connected(id):
	pass # Player connected to the server

func _player_disconnected(id):
	#player disconnected from the server
	#TODO: save state of actor before removing it
	var disconnected = Players[String(id)]
	if (disconnected != null):
		Players.erase(disconnected.name)
		disconnected.queue_free()

func _setup_server(port):
	var peer = NetworkedMultiplayerENet.new()
	#TODO: configure max players
	var err = peer.create_server(port, 64)
	if (err == OK):
		get_tree().set_network_peer(peer)
		
		get_tree().connect(\"network_peer_connected\", self, \"_player_connected\")
		get_tree().connect(\"network_peer_disconnected\", self, \"_player_disconnected\")
		
		_update_all_clients_thread.start(self, \"_update_all_clients\")
	else:
		print(\"Failed to setup server\")
	return err

func _setup_client(ip, port):
	global.connectLock.lock()
	
	var peer = NetworkedMultiplayerENet.new()
	var err = peer.create_client(global.SERVER_IP, global.SERVER_PORT)
	if (err == OK):
		get_tree().set_network_peer(peer)
		
		get_tree().connect(\"network_peer_connected\", self, \"_player_connected\")
		get_tree().connect(\"network_peer_disconnected\", self, \"_player_disconnected\")
		get_tree().connect(\"connected_to_server\", self, \"_connected_ok\")
		get_tree().connect(\"connection_failed\", self, \"_connected_fail\")
		get_tree().connect(\"server_disconnected\", self, \"_server_disconnected\")
	return err


func _ready():
	#TODO: Read global params to determine how to generate world
	if (global.WORLD_MULTI):
		if (global.WORLD_HOST):
			if (global.WORLD_LOAD):
				pass #TODO: load world state from save file, keeping PlayerActors unloaded
			else:
				pass #TODO: generate world from scratch, with no PlayerActors
			var err = _setup_server(global.SERVER_PORT)
			if (err != OK):
				get_tree().set_network_peer(null)
				#TODO: give popup of issue before going back to menu
				get_tree().change_scene(\"res://Main/Main.tscn\")
			
		else:
			#BackgroundMusic.play()
			var err = _setup_client(global.SERVER_IP, global.SERVER_PORT)
			if (err != OK):
				get_tree().set_network_peer(null)
				#TODO: give popup of issue before going back to menu
				get_tree().change_scene(\"res://Main/Main.tscn\")
	else:
		#BackgroundMusic.play()
		if (global.WORLD_LOAD):
			pass #TODO: load world state from save file, including PlayerActor and PlayerController
		else:
			#TODO: generate world from scratch
			_spawn_single_player()
		
	


#------------------------
# Remote Funcs
#------------------------
remote func updateClock(clock):
	global.clock = clock

remote func addPlayerToGame():
	#Add remote player to the game
	var sender = get_tree().get_rpc_sender_id()
	#TODO: add a way to get a recorded player state, or initiate a new one
	if (get_tree().get_network_unique_id() == 1 and get_tree().get_network_unique_id() != sender):
		_spawn_network_player(String(sender))

remote func updateWorld(playerMap, itemMap):
	if (get_tree().get_network_unique_id() == 1):
		return
	
	var players = Players.values()
	for p in players:
		var id = p.name
		if (playerMap.has(id)):
			if (playerMap[id] != null):
				p.setState(playerMap[id])
		else:
			if (id != String(get_tree().get_network_unique_id())):
				_remove_player(id)
		playerMap.erase(id)
	for key in playerMap:
		if (key != String(get_tree().get_network_unique_id())):
			var newplayer = _spawn_network_player(key)
			newplayer.setState(playerMap[key])
	
	var items = Items.values()
	for i in items:
		var id = i.name
		if (itemMap.has(id)):
			if (itemMap[id] != null):
				pass
				i.setState(itemMap[id])
		else:
			pass
			_remove_item(id)
		itemMap.erase(id)
	for key in itemMap:
		pass
		load_item(itemMap[key])
	
	#TODO: do the same for NPCs, items, etc

remote func walkTowards(dest):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"walkTowards\")):
		sender.walkTowards(dest)

remote func pickUp(item_id):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"pickUp\")):
		sender.pickUp(Items[item_id])

remote func dropItem(item_id):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"dropItem\")):
		sender.dropItem(item_id)

remote func equipItem(id):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"equipItem\")):
		sender.equipItem(id)

remote func unequipItem(type):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"unequipItem\")):
		sender.unequipItem(type)

remote func setInCombat(combat):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"setInCombat\")):
		sender.setInCombat(combat)

remote func queueAbilityTowardsByName(ability_name, point):
	var sender = Players[String(get_tree().get_rpc_sender_id())]
	if (sender != null and sender.has_method(\"queueAbilityTowardsByName\")):
		sender.queueAbilityTowardsByName(ability_name, point)
"

[node name="World" type="Node" index="0"]

script = SubResource( 1 )

[node name="Forest1" parent="." index="0" instance=ExtResource( 1 )]


